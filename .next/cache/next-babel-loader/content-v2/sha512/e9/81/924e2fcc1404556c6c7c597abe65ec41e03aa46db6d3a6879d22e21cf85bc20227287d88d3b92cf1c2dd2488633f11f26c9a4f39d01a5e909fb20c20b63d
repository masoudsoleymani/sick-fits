{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nexport default function useForm(initial = {}) {\n  // Creat  a state object  for our inport\n  const {\n    0: inputs,\n    1: setInputs\n  } = useState(initial);\n\n  function handleChange(e) {\n    let {\n      value,\n      name,\n      type\n    } = e.target;\n\n    if (type === 'number') {\n      value = parseInt(value);\n    }\n\n    if (type === 'file') {\n      value[0] = e.target.file;\n    }\n\n    setInputs(_objectSpread(_objectSpread({}, inputs), {}, {\n      [e.target.name]: e.target.value\n    }));\n  }\n\n  return {\n    inputs,\n    handleChange\n  };\n}","map":{"version":3,"sources":["/Users/msoleym/sick-fits-ui/lib/useForm.js"],"names":["useState","useForm","initial","inputs","setInputs","handleChange","e","value","name","type","target","parseInt","file"],"mappings":";;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,eAAe,SAASC,OAAT,CAAiBC,OAAO,GAAG,EAA3B,EAA+B;AAC5C;AACA,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBJ,QAAQ,CAACE,OAAD,CAApC;;AAEA,WAASG,YAAT,CAAsBC,CAAtB,EAAyB;AACrB,QAAI;AAACC,MAAAA,KAAD;AAAQC,MAAAA,IAAR;AAAcC,MAAAA;AAAd,QAAsBH,CAAC,CAACI,MAA5B;;AACA,QAAGD,IAAI,KAAI,QAAX,EAAoB;AAChBF,MAAAA,KAAK,GAAGI,QAAQ,CAACJ,KAAD,CAAhB;AACH;;AACD,QAAGE,IAAI,KAAM,MAAb,EAAoB;AAChBF,MAAAA,KAAK,CAAC,CAAD,CAAL,GAAWD,CAAC,CAACI,MAAF,CAASE,IAApB;AACH;;AACHR,IAAAA,SAAS,iCAEJD,MAFI;AAGP,OAACG,CAAC,CAACI,MAAF,CAASF,IAAV,GAAiBF,CAAC,CAACI,MAAF,CAASH;AAHnB,OAAT;AAKD;;AAED,SAAO;AACLJ,IAAAA,MADK;AAELE,IAAAA;AAFK,GAAP;AAID","sourcesContent":["import { useState } from 'react';\n\nexport default function useForm(initial = {}) {\n  // Creat  a state object  for our inport\n  const [inputs, setInputs] = useState(initial);\n  \n  function handleChange(e) {\n      let {value, name, type} = e.target;\n      if(type ==='number'){\n          value = parseInt(value);\n      }\n      if(type  === 'file'){\n          value[0] = e.target.file\n      }\n    setInputs({\n      //  copy the existing state\n      ...inputs,\n      [e.target.name]: e.target.value,\n    });\n  }\n\n  return {\n    inputs,\n    handleChange,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}